//import soundProducer.*
import wollok.game.*
import direcciones.*
import vida.*
import jugador.*
import arma.*
import enemigo.*
import itemVida.*
import score.*
import ObjetoMovil.*
import generadorDeObjetosMoviles.*

/*
describe "Test Jugador" {	
test "Jugador se mueve"{
	jugador.moverPara(derecha)
	assert.equals(game.at(1,0), jugador.position())
}

test "Cuando un jugador dispara mira asi arriba"{
	jugador.disparar()
	assert.equals(arriba, jugador.direccion())
}
	
test "Cuando un jugador es colicionado por un objeto pierde uno de vida"{
	const enemigo = new Enemigo()
	enemigo.addObjetoMovil(0)
	jugador.colisionadoPor(enemigo)
	assert.equals(2, jugador.obtenerVidas().cantidad())
}
}


describe "Test Vida" {	
test "Se modifica la cantidad de Vida"{	
	vida.modificar(1)
	assert.equals(4,vida.cantidad())
}

test "Cuando la vida es 0 se termina el juego"{	
	3.times({_=>vida.modificar(-1)})
	assert.notThat(game.hasVisual(jugador))
}
}


describe "Test Enemigo"{ 	
const enemigo = new Enemigo()

test "Un enemigo hace danio al impactar un jugador"{
	enemigo.addObjetoMovil(0)
	const vidaComienzo = vida.cantidad()
	jugador.colisionadoPor(enemigo)
	assert.equals(vidaComienzo-1,vida.cantidad())
}

test "Un enemigo que es impactado debe desaparecer"{
	enemigo.addObjetoMovil(0)
	enemigo.efecto()
	assert.notThat(game.hasVisual(enemigo))
}

test "La destruccion de un enemigo da 100 puntos al score"{
	assert.equals(100,enemigo.puntosObtenidos())
}
}


describe "Test ItemVida"{ 
const vidaExtra = new ItemVida()
	
test "El efecto del ItemVida aumenta la salud de un jugador" {
	vidaExtra.addObjetoMovil(0)
	vidaExtra.efecto()
	assert.equals(4,vida.cantidad())
}
test "La destruccion del itemVida resta 100 puntos al score" {
	vidaExtra.addObjetoMovil(0)
	lanza.impactar(vidaExtra)
	assert.equals(puntos.puntos(),-100)
}
}


describe "Test ObjetoMovil" {
	var objeto
	
	test "Un objeto movil no genera danio" {
		objeto = new ObjetoMovil(desplazamiento = arriba)
		
		assert.equals(0,objeto.danio())
	}
	
	test "No se obtiene punto por la destruccion de un objeto movil" {
		objeto = new ObjetoMovil(desplazamiento = arriba)
		assert.equals(0,objeto.puntosObtenidos())
	}
	
	test "Un objeto movil al ser impactado desaparece" {
		objeto = new ObjetoMovil(desplazamiento = arriba)
		objeto.addObjetoMovil(0)
		objeto.impactadoPorArma(lanza)
		
		assert.notThat(game.hasVisual(objeto))
	}
}


describe "Test Lanza"{

test "Al disparar el arma se posiciciona debajo del jugador"{
	lanza.disparar(jugador)
	assert.equals(lanza.position(), jugador.position().down(2))
}

test "El arma se desplaza si esta en movimiento"{
	lanza.disparar(jugador)
	const posicionActual = lanza.position().up(1)
	lanza.desplazar() 
	
	assert.equals(posicionActual, lanza.position())
}

test "El arma no se desplaza si no esta en movimiento"{	
	const posicionActual = lanza.position()
	lanza.desplazar() 
	assert.equals(posicionActual, lanza.position())
}	

test "Si el arma impacta un objeto lo elimina" {
	const enemigo = new Enemigo()
	enemigo.addObjetoMovil(0)
	
	lanza.impactar(enemigo)
	assert.notThat(game.hasVisual(enemigo))
}

test "Si el arma impacta al personaje no lo elimina" {
	game.addVisual(jugador)
	lanza.impactar(jugador)
	assert.that(game.hasVisual(jugador))
} 
}

*/